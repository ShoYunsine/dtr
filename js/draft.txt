onAuthStateChanged(auth, async (user) => {
    if (user) {
        currentUser = auth.currentUser; 
        accountName.innerHTML = user.displayName;
        accountImg.src = user.photoURL;
        accountEmail.innerHTML = user.email;
        try {
            const { averageColor, secondColor } = await getAverageAndSecondColor(user.photoURL);
            const color = `rgb(${averageColor.r}, ${averageColor.g}, ${averageColor.b})`;
            const color2 = `rgb(${secondColor.r}, ${secondColor.g}, ${secondColor.b})`;
            bg.style.backgroundImage = `linear-gradient(45deg, ${color2}, ${color})`;
            accountDetails.style.backgroundImage = `linear-gradient(${color}, ${color2})`;
        } catch (error) {
            console.error(error);
            const { averageColor, secondColor } = await getAverageAndSecondColor("Images/gear.png");
            const color = `rgb(${averageColor.r}, ${averageColor.g}, ${averageColor.b})`;
            const color2 = `rgb(${secondColor.r}, ${secondColor.g}, ${secondColor.b})`;
            bg.style.backgroundImage = `linear-gradient(45deg, ${color2}, ${color})`;
            accountDetails.style.backgroundImage = `linear-gradient(${color}, ${color2})`;
            accountImg.src = "Images/gear.png";
        }
        // ...
    } else {
        if (typeof on_dash != 'undefined') {
            dashboard.style.display = "none";
            signUpcontainer.style.display = "none";
            loginButton.style.display = "none";
            signOutButton.style.display = "none";
        }
        try {

            const { averageColor, secondColor } = await getAverageAndSecondColor("Images/gear.png");
            const color = `rgb(${averageColor.r}, ${averageColor.g}, ${averageColor.b})`;
            const color2 = `rgb(${secondColor.r}, ${secondColor.g}, ${secondColor.b})`;
            bg.style.backgroundImage = `linear-gradient(45deg, ${color2}, ${color})`;
            accountDetails.style.backgroundImage = `linear-gradient(${color}, ${color2})`;
        } catch (error) {
            console.error(error);
        }
        accountEmail.innerHTML = "Â·";
    }
});

 <div class="form-section">
      <h2>Join a Class</h2>
      <form id="classjoinForm">
        <div>
          <h3 for="classCode">Class Code</h3>
          <input type="text" id="classCode" name="classCode" required placeholder="Code">
        </div>
        <button type="submit" class="submit-btn">Join Class</button>
      </form>
    </div>

${year}-${month}-${day}/${location.latitude}-${location.longitude}
await cache.addAll([
        '../', 
        '../index.html', 
        '../css/style.css', 
        '../js/script.js', 
        '../classes.html', 
        '../css/classes.css',
        '../js/classes.js',
        '../class.html',
        '../css/class.css',
        '../js/class.js',
        '../css/login-signup-style.css',
        '../js/firebase.js',
        '../js/login.js',
        '../js/index.js',
        '../Images/logo.png'
      ]);

src="https://sorsu.edu.ph/wp-content/uploads/2024/04/SORSU-COT-SPECIAL-GENERAL-ASSEMBLY-2.jpg"

 const today = new Date();
            const year = today.getFullYear();
            const month = today.getMonth() + 1; // Months are zero-indexed (0 = January, 11 = December)
            const day = today.getDate();
            

            function getLocation() {
                return new Promise((resolve, reject) => {
                    if (navigator.geolocation) {
                        console.log("Getting Location");
                        navigator.geolocation.getCurrentPosition(
                            position => resolve(position.coords),
                            error => reject(alert('Unable to retrieve location: ' + error.message)),
                            {
                                enableHighAccuracy: true,
                                timeout: 100000000000000000,
                                maximumAge: 100000000000000000000000000000000 
                            }
                        );
                    } else {
                        reject(new Error('Geolocation is not supported by this browser.'));
                    }
                });
            }
            let location = await getLocation();
            
// Import Firebase scripts required for service workers
importScripts('https://www.gstatic.com/firebasejs/10.12.5/firebase-app.js');
importScripts('https://www.gstatic.com/firebasejs/10.12.5/firebase-messaging.js');

// Your Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyD2njL-ut8J-eEtp-1Pr6XzF8uEccBEngc",
  authDomain: "date-time-record.firebaseapp.com",
  projectId: "date-time-record",
  storageBucket: "date-time-record.appspot.com",
  messagingSenderId: "624915234552",
  appId: "1:624915234552:web:fd98814a56a2d434ce450d",
  measurementId: "G-EV3TFLDQ7E"
};

// Initialize Firebase
firebase.initializeApp(firebaseConfig);

// Retrieve an instance of Firebase Messaging
const messaging = firebase.messaging();

// Handle background messages
messaging.onBackgroundMessage((payload) => {
  console.log('[firebase-messaging-sw.js] Received background message ', payload);

  const notificationTitle = 'Background Message Title';
  const notificationOptions = {
    body: 'Background Message body.',
    icon: '../Images/logo.png'
  };

  self.registration.showNotification(notificationTitle, notificationOptions);
});

<table style="width:100%; border-collapse: collapse;">
  <thead>
    <tr>
      <th style="border: 1px solid #ddd; padding: 8px;">Member Name</th>
      {{#each weekdays}}
      <th style="border: 1px solid #ddd; padding: 8px;">{{this}}</th>
      {{/each}}
    </tr>
  </thead>
  <tbody>
    {{#each members}}
    <tr>
      <td style="border: 1px solid #ddd; padding: 8px;">{{name}}</td>
      {{#each days}}
      <td style="border: 1px solid #ddd; padding: 8px; background-color: {{color}};">
        {{status}} {{timeChecked}}
      </td>
      {{/each}}
    </tr>
    {{/each}}
  </tbody>
</table>